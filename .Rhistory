cont.type == "prompt")) %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker)
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response")) %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker)
mode
conttbl <- conttbl %>%
arrange(cont.type, utt.idx)
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
} else {
# TO DO
print("NOT A MODE")
}
mode
mode == "stretch"
modes <- c("strict", "stretch", "luqr", "qulr")
!(mode %in% modes)
conttbl <- conttbl %>%
arrange(cont.type, utt.idx)
!(mode %in% modes)
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
prompts <- prompts %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker)
responses <- responses %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker)
conttbl.merged <- bind_rows(prompts, responses) %>%
arrange(utt.idx)
View(conttbl.merged)
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
prompts <- prompts %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker) %>%
select(-cont.type)
responses <- responses %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker) %>%
select(-cont.type)
conttbl.merged <- full_join(prompts, responses) %>%
arrange(utt.idx)
create_tttbl <- function(conttbl, mode) {
if(check_conttbl(conttbl)) {
conttbl <- conttbl %>%
arrange(cont.type, utt.idx)
if (!(mode %in% modes)) {
# TO DO
print("NOT A MODE")
} else {
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
prompts <- prompts %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker) %>%
select(-cont.type)
responses <- responses %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker) %>%
select(-cont.type)
tttbl <- full_join(prompts, responses) %>%
arrange(utt.idx)
}
}
return(tttbl)
}
tttbl <- full_join(prompts, responses, by = "utt.idx") %>%
arrange(utt.idx)
tttbl
create_tttbl <- function(conttbl, mode) {
if(check_conttbl(conttbl)) {
conttbl <- conttbl %>%
arrange(cont.type, utt.idx)
if (!(mode %in% modes)) {
# TO DO
print("NOT A MODE")
} else {
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
prompts <- prompts %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker) %>%
select(-cont.type)
responses <- responses %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker) %>%
select(-cont.type)
tttbl <- full_join(prompts, responses, by = "utt.idx") %>%
arrange(utt.idx)
}
}
return(tttbl)
}
create_tttbl <- function(conttbl, mode) {
if(check_conttbl(conttbl)) {
conttbl <- conttbl %>%
arrange(cont.type, utt.idx)
if (!(mode %in% modes)) {
# TO DO
print("NOT A MODE")
} else {
if (mode == "strict") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "stretch") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "luqr") {
prompts <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_smaller_idx_LR(filter(conttbl,
cont.type == "response"))
}
if (mode == "qulr") {
prompts <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "prompt"))
responses <- choose_bigger_idx_LR(filter(conttbl,
cont.type == "response"))
}
prompts <- prompts %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(prompt.stop.ms = cont.utt.boundary,
prompt.spkr = cont.utt.speaker) %>%
select(-cont.type)
responses <- responses %>%
filter(!is.na(cont.utt.boundary)) %>%
rename(response.start.ms = cont.utt.boundary,
response.spkr = cont.utt.speaker) %>%
select(-cont.type)
tttbl <- full_join(prompts, responses, by = "utt.idx") %>%
arrange(utt.idx)
}
}
return(tttbl)
}
chi.idx.tttbl <- create_tttbl(contingent.utts, mode)
View(chi.idx.tttbl)
spchtbl.cropped <- crop_to_annots(spchtbl)
spchtbl.annsubset <- filter(spchtbl.cropped,
annotclip != "none assigned")
# extract the interactant utterances
if (interactants == ".all-speakers") {
int.utts <- filter(spchtbl.annsubset, speaker != "CHI" &
!grepl(start.ann, speaker))
} else {
int.utts <- filter(spchtbl.annsubset, speaker %in% interactants &
!grepl(start.ann, speaker))
}
# only include those that are addressed appropriately
if (addressee.tags == "TCDS") {
int.utts <- filter(int.utts, addressee == "T")
} else if (addressee.tags == "CDS") {
int.utts <- filter(int.utts, addressee == "C")
} # no need to subset further if there is no addressee coding
# (i.e., if addressee == "none")
# extract the focus child utterances (each is considered an 'utt_0')
# and add transition window information
chi.utts <- extract_focusutts(spchtbl.annsubset, focus.child) %>%
mutate(utt.idx = c(1:nrow(chi.utts)))
chi.utts
View(chi.utts)
chi.utts.ms.tbl <- expand_msec_windows(chi.utts, allowed.gap, allowed.overlap)
prewindow.stops <- filter(chi.utts.ms.tbl, focal.utt.idx.prw != "") %>%
dplyr::select(-focal.utt.idx.psw) %>%
left_join(select(int.utts, c(speaker, stop.ms)),
by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
# CHI-OTH transitions (i.e., utt_+1)
# find candidate utterances which can be a response to utt_0
postwindow.starts <- filter(chi.utts.ms.tbl, focal.utt.idx.psw != "") %>%
dplyr::select(-focal.utt.idx.prw) %>%
left_join(select(int.utts, c(speaker, start.ms)),
by = c("msec" = "start.ms")) %>%
filter(!is.na(speaker))
contingent.utts <- combine_prwpsw_utts(prewindow.stops, postwindow.starts)
chi.idx.tttbl <- create_tttbl(contingent.utts, mode)
chi.tttbl <- left_join(chi.idx.tttbl, chi.utts, by = "utt.idx")
View(chi.tttbl)
chi.tttbl <- right_join(chi.utts, chi.idx.tttbl, by = "utt.idx") %>%
select(-utt.idx)
fetch_transitions <- function(spchtbl, allowed.gap, allowed.overlap,
focus.child, interactants, addressee.tags, mode) {
# only include utterances occurring within annotated clips
# (clips over-hanging utterances)
spchtbl.cropped <- crop_to_annots(spchtbl)
spchtbl.annsubset <- filter(spchtbl.cropped,
annotclip != "none assigned")
# extract the interactant utterances
if (interactants == ".all-speakers") {
int.utts <- filter(spchtbl.annsubset, speaker != "CHI" &
!grepl(start.ann, speaker))
} else {
int.utts <- filter(spchtbl.annsubset, speaker %in% interactants &
!grepl(start.ann, speaker))
}
# only include those that are addressed appropriately
if (addressee.tags == "TCDS") {
int.utts <- filter(int.utts, addressee == "T")
} else if (addressee.tags == "CDS") {
int.utts <- filter(int.utts, addressee == "C")
} # no need to subset further if there is no addressee coding
# (i.e., if addressee == "none")
# extract the focus child utterances (each is considered an 'utt_0')
# and add transition window information
chi.utts <- extract_focusutts(spchtbl.annsubset, focus.child) %>%
mutate(utt.idx = c(1:nrow(chi.utts)))
# define pre- and post- utterance windows for all utt_0s
# (window overlap is possible with closely sequenced utts)
chi.utts.ms.tbl <- expand_msec_windows(chi.utts, allowed.gap, allowed.overlap)
# OTH-CHI transitions (i.e., utt_-1)
# find candidate utterances to which utt_0 can be a response
prewindow.stops <- filter(chi.utts.ms.tbl, focal.utt.idx.prw != "") %>%
dplyr::select(-focal.utt.idx.psw) %>%
left_join(select(int.utts, c(speaker, stop.ms)),
by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
# CHI-OTH transitions (i.e., utt_+1)
# find candidate utterances which can be a response to utt_0
postwindow.starts <- filter(chi.utts.ms.tbl, focal.utt.idx.psw != "") %>%
dplyr::select(-focal.utt.idx.prw) %>%
left_join(select(int.utts, c(speaker, start.ms)),
by = c("msec" = "start.ms")) %>%
filter(!is.na(speaker))
contingent.utts <- combine_prwpsw_utts(prewindow.stops, postwindow.starts)
chi.idx.tttbl <- create_tttbl(contingent.utts, mode)
chi.tttbl <- right_join(chi.utts, chi.idx.tttbl, by = "utt.idx") %>%
select(-utt.idx)
return(chi.tttbl)
}
mc.transitions <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "stretch")
View(mc.transitions)
mc.transitions.stretch <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "stretch")
#default values (as above)
#addressee.tags: TCDS, CDS, none
#mode: stretch, strict, luqr, qulr
mc.transitions.strict <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "strict")
mc.transitions.luqr <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "luqr")
mc.transitions.qulr <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "qulr")
View(mc.transitions.stretch)
View(mc.transitions.strict)
mean(ms.transitions.stretch$prompt.stop.ms)
mean(mc.transitions.stretch$prompt.stop.ms)
mean(mc.transitions.stretch$prompt.stop.ms, na.rm=TRUE)
mc.transitions.stretch$prompt.stop.ms
chi.tttbl <- right_join(chi.utts, chi.idx.tttbl, by = "utt.idx") %>%
select(-utt.idx) %>%
mutate(
prompt.stop.ms = as.numeric(prompt.stop.ms),
response.start.ms = as.numeric(response.start.ms))
chi.tttbl
View(chi.tttbl)
fetch_transitions <- function(spchtbl, allowed.gap, allowed.overlap,
focus.child, interactants, addressee.tags, mode) {
# only include utterances occurring within annotated clips
# (clips over-hanging utterances)
spchtbl.cropped <- crop_to_annots(spchtbl)
spchtbl.annsubset <- filter(spchtbl.cropped,
annotclip != "none assigned")
# extract the interactant utterances
if (interactants == ".all-speakers") {
int.utts <- filter(spchtbl.annsubset, speaker != "CHI" &
!grepl(start.ann, speaker))
} else {
int.utts <- filter(spchtbl.annsubset, speaker %in% interactants &
!grepl(start.ann, speaker))
}
# only include those that are addressed appropriately
if (addressee.tags == "TCDS") {
int.utts <- filter(int.utts, addressee == "T")
} else if (addressee.tags == "CDS") {
int.utts <- filter(int.utts, addressee == "C")
} # no need to subset further if there is no addressee coding
# (i.e., if addressee == "none")
# extract the focus child utterances (each is considered an 'utt_0')
# and add transition window information
chi.utts <- extract_focusutts(spchtbl.annsubset, focus.child) %>%
mutate(utt.idx = c(1:nrow(chi.utts)))
# define pre- and post- utterance windows for all utt_0s
# (window overlap is possible with closely sequenced utts)
chi.utts.ms.tbl <- expand_msec_windows(chi.utts, allowed.gap, allowed.overlap)
# OTH-CHI transitions (i.e., utt_-1)
# find candidate utterances to which utt_0 can be a response
prewindow.stops <- filter(chi.utts.ms.tbl, focal.utt.idx.prw != "") %>%
dplyr::select(-focal.utt.idx.psw) %>%
left_join(select(int.utts, c(speaker, stop.ms)),
by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
# CHI-OTH transitions (i.e., utt_+1)
# find candidate utterances which can be a response to utt_0
postwindow.starts <- filter(chi.utts.ms.tbl, focal.utt.idx.psw != "") %>%
dplyr::select(-focal.utt.idx.prw) %>%
left_join(select(int.utts, c(speaker, start.ms)),
by = c("msec" = "start.ms")) %>%
filter(!is.na(speaker))
contingent.utts <- combine_prwpsw_utts(prewindow.stops, postwindow.starts)
chi.idx.tttbl <- create_tttbl(contingent.utts, mode)
chi.tttbl <- right_join(chi.utts, chi.idx.tttbl, by = "utt.idx") %>%
select(-utt.idx) %>%
mutate(
prompt.stop.ms = as.numeric(prompt.stop.ms),
response.start.ms = as.numeric(response.start.ms))
return(chi.tttbl)
}
mc.transitions.stretch <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "stretch")
#default values (as above)
#addressee.tags: TCDS, CDS, none
#mode: stretch, strict, luqr, qulr
mc.transitions.strict <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "strict")
mean(mc.transitions.stretch$prompt.stop.ms, na.rm=TRUE)
mean(mc.transitions.strict$prompt.stop.ms, na.rm=TRUE)
mc.ADU.tiers <- unique(mc.data$speaker)[grep(
"[MFU]A\\d", unique(mc.data$speaker))]
mc.transitions.ADUonly <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = mc.ADU.tiers,
addressee.tags = "CDS", mode = "stretch")
my.transitions <- fetch_transitions(spchtbl = ai.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "Child Utterances", interactants = "all-speakers",
addressee.tags = "none", mode = "strict")
mc.elan.txt <- "test_files/AAS-tabular/VanFJ11-0GS0.txt"
ai.elan.txt <- "test_files/AltELAN-tabular/CT_sample1.txt"
# read data into the spchtbl format
mc.data <- read_spchtbl(filepath = mc.elan.txt,
tbltype = "aas-elan-txt", cliptier = "code")
ai.data <- read_spchtbl(filepath = ai.elan.txt,
tbltype = "elan-basic-txt", cliptier = "Coded Segment")
# find all turn transitions within annotated clips
mc.transitions.stretch <- fetch_transitions(spchtbl = mc.data,
allowed.gap = 1000, allowed.overlap = 2000,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "stretch")
View(mc.transitions.stretch)
source("tabularize-data.R")
source("transition-detectors.R")
source("intseq-detectors.R")
source("chattr-helpers.R")
testdata1 <- "test_files/AltELAN-tabular/test-interaction-AllCDS.txt"
testdata2 <- "test_files/AltELAN-tabular/test-interaction-XDS.txt"
testdata3 <- "test_files/ITS/e20100727_110707_003581.its"
testdata1 <- read_spchtbl(filepath = testdata1.filename,
tbltype = "aas-elan-txt", cliptier = "clip")
testdata1.filename <- "test_files/AltELAN-tabular/test-interaction-AllCDS.txt"
testdata2.filename <- "test_files/AltELAN-tabular/test-interaction-XDS.txt"
testdata3.filename <- "test_files/ITS/e20100727_110707_003581.its"
testdata1 <- read_spchtbl(filepath = testdata1.filename,
tbltype = "aas-elan-txt", cliptier = "clip")
testdata1
testdata1.stretch <- fetch_transitions(
mc.data, allowed.gap, allowed.overlap,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "stretch")
testdata1.stretch
testdata1.qulr <- fetch_transitions(
mc.data, allowed.gap, allowed.overlap,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "qulr")
testdata1.luqr <- fetch_transitions(
mc.data, allowed.gap, allowed.overlap,
focus.child = "CHI", interactants = ".all-speakers",
addressee.tags = "CDS", mode = "luqr")
mc.data
