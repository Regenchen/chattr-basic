select(speaker, start.ms, value) %>%
rename(addressee = value)
# now add in vocal maturity data (to-do)
#  vcm.aastbl <- filter(aastbl, speaker == "CHI" & speaker != tier) %>%
#    spread(tier, value) %>%
#    rename(vcm = 'vcm@CHI', lex = 'lex@CHI', mwu = 'mwu@CHI') %>%
#    select(speaker, start.ms, vcm, lex, mwu)
# add all info to wide table
wide.aastbl <- left_join(wide.aastbl, xds.aastbl) %>%
#    left_join(vcm.aastbl) %>%
select(speaker, start.ms, stop.ms, addressee)
# add in information about the annotated regions
# (if no annotation, stop and tell the user)
if (cliptier %in% unique(aastbl$tier)) {
clip.tbl <- filter(aastbl, tier == cliptier) %>%
mutate(speaker = paste0("annotated-", start.ms, "-", value),
addressee = NA) %>%
select(speaker, start.ms, stop.ms, addressee)
wide.aastbl <- bind_rows(clip.tbl, wide.aastbl)
return(wide.aastbl)
} else {
print("Error: no rows from the clip tier found.")
}
}
elanbasic_to_spchtbl <- function(tbl, cliptier) {
ebtbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
tier = col_character(),
speaker = col_character(),
start.ms = col_integer(),
stop.ms = col_integer(),
duration = col_integer(),
value = col_character()
)) %>%
select(tier, start.ms, stop.ms, value) %>%
rename(speaker = tier)
# add in information about the annotated regions
# (if no annotation, stop and tell the user)
if (cliptier %in% unique(ebtbl$speaker)) {
clip.tbl <- filter(ebtbl, speaker == cliptier) %>%
mutate(speaker = paste0("annotated-", start.ms, "-", value))
ebtbl <- bind_rows(clip.tbl, ebtbl)
return(ebtbl)
} else {
print("Error: no rows from the clip tier found.")
}
}
my.data <- read_spchtbl(filepath = my.elan.txt,
tbltype = "aas-elan-txt", cliptier = "code")
ai.data <- read_spchtbl(filepath = ai.elan.txt,
tbltype = "elan-basic-txt", cliptier = "Coded Segment")
my.ADU.tiers <- grep("[MFU]A\\d", unique(my.data$speaker))
my.ADU.tiers
my.ADU.tiers <- unique(my.data$speaker)[grep("[MFU]A\\d", unique(my.data$speaker))]
my.ADU.tiers
my.ADU.tiers <- unlist(unique(my.data$speaker)[grep("[MFU]A\\d", unique(my.data$speaker))])
my.ADU.tiers
my.ADU.tiers <- c(unique(my.data$speaker)[grep("[MFU]A\\d", unique(my.data$speaker))])
my.ADU.tiers
test <- c("FA1", "FA2")
test
class(test)
class(my.ADU.tiers)
my.ADU.tiers <- unique(my.data$speaker)[grep("[MFU]A\\d", unique(my.data$speaker))]
my.ADU.tiers
View(my.data)
View(ai.data)
library(tidyverse)
ebtbl.colnames <- c("tier", "speaker", "start.ms", "stop.ms", "duration", "value")
# This must be in the rigid spchtbl format specified in the docs
read_spchtbl <- function(filepath, tbltype, cliptier) {
if (tbltype == "aas-elan-txt") {
spchtbl <- aas_to_spchtbl(filepath, cliptier)
} else if (tbltype == "elan-basic-txt") {
spchtbl <- elanbasic_to_spchtbl(filepath, cliptier)
} else {
print("Sorry, that file type isn't available!")
}
return(spchtbl)
}
aas_to_spchtbl <- function(tbl, cliptier) {
aastbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
tier = col_character(),
speaker = col_character(),
start.ms = col_integer(),
stop.ms = col_integer(),
duration = col_integer(),
value = col_character()
))
# extract the top-level utterance tiers
wide.aastbl <- filter(aastbl, tier == speaker)
# add in addressee information for each utterance
xds.aastbl <- filter(aastbl, grepl('xds', tier)) %>%
select(speaker, start.ms, value) %>%
rename(addressee = value)
# now add in vocal maturity data (to-do)
#  vcm.aastbl <- filter(aastbl, speaker == "CHI" & speaker != tier) %>%
#    spread(tier, value) %>%
#    rename(vcm = 'vcm@CHI', lex = 'lex@CHI', mwu = 'mwu@CHI') %>%
#    select(speaker, start.ms, vcm, lex, mwu)
# add all info to wide table
wide.aastbl <- left_join(wide.aastbl, xds.aastbl) %>%
#    left_join(vcm.aastbl) %>%
select(speaker, start.ms, stop.ms, addressee)
# add in information about the annotated regions
# (if no annotation, stop and tell the user)
if (cliptier %in% unique(aastbl$tier)) {
clip.tbl <- filter(aastbl, tier == cliptier) %>%
mutate(speaker = paste0("annotated-", start.ms, "-", value),
addressee = NA) %>%
select(speaker, start.ms, stop.ms, addressee)
wide.aastbl <- bind_rows(clip.tbl, wide.aastbl)
return(wide.aastbl)
} else {
print("Error: no rows from the clip tier found.")
}
}
elanbasic_to_spchtbl <- function(tbl, cliptier) {
ebtbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
tier = col_character(),
speaker = col_character(),
start.ms = col_integer(),
stop.ms = col_integer(),
duration = col_integer(),
value = col_character()
)) %>%
select(tier, start.ms, stop.ms, value) %>%
rename(speaker = tier)
# add in information about the annotated regions
# (if no annotation, stop and tell the user)
if (cliptier %in% unique(ebtbl$speaker)) {
clip.tbl <- filter(ebtbl, speaker == cliptier) %>%
mutate(speaker = paste0("annotated-", start.ms, "-", value))
ebtbl <- bind_rows(clip.tbl, ebtbl) %>%
select(-value)
return(ebtbl)
} else {
print("Error: no rows from the clip tier found.")
}
}
my.elan.txt <- "test_files/AAS-tabular/VanFJ11-0GS0.txt"
ai.elan.txt <- "test_files/AltELAN-tabular/CT_sample1.txt"
# read data into the spchtbl format
my.data <- read_spchtbl(filepath = my.elan.txt,
tbltype = "aas-elan-txt", cliptier = "code")
ai.data <- read_spchtbl(filepath = ai.elan.txt,
tbltype = "elan-basic-txt", cliptier = "Coded Segment")
mc.elan.txt <- "test_files/AAS-tabular/VanFJ11-0GS0.txt"
ai.elan.txt <- "test_files/AltELAN-tabular/CT_sample1.txt"
# read data into the spchtbl format
mc.data <- read_spchtbl(filepath = mc.elan.txt,
tbltype = "aas-elan-txt", cliptier = "code")
ai.data <- read_spchtbl(filepath = ai.elan.txt,
tbltype = "elan-basic-txt", cliptier = "Coded Segment")
spchtbl = mc.data
allowed.gap = 1000
allowed.overlap = 2000
focus.child = "CHI"
".all-speakers"
interactants = ".all-speakers"
addressee.tags = "CDS"
chi.utts <- filter(spchtbl, speaker == focus.child)
chi.utts
mode = "stretch"
interactants
View(mc.data)
filter(mc.data, speaker != "CHI" & !grepl("^annotated-", speaker))
interactants = mc.ADU.tiers
mc.ADU.tiers <- unique(mc.data$speaker)[grep(
"[MFU]A\\d", unique(mc.data$speaker))]
interactants = mc.ADU.tiers
filter(spchtbl, speaker %in% interactants)
unique(filter(spchtbl, speaker %in% interactants)$speaker)
unique(filter(mc.data, speaker != "CHI" & !grepl("^annotated-", speaker))$speaker
unique(filter(mc.data, speaker != "CHI" & !grepl("^annotated-", speaker)))$speaker
unique(filter(mc.data, speaker != "CHI" & !grepl("^annotated-", speaker))$speaker)
int.utts <- filter(spchtble, speaker != "CHI" &
!grepl("^annotated-", speaker))
int.utts <- filter(spchtbl, speaker != "CHI" &
!grepl("^annotated-", speaker))
View(int.utts)
addressee.tags == "TCDS"
addressee.tags == "CDS"
int.utts <- filter(int.utts, addressee == "C")
source("tabularize-data.R")
mc.elan.txt <- "test_files/AAS-tabular/VanFJ11-0GS0.txt"
ai.elan.txt <- "test_files/AltELAN-tabular/CT_sample1.txt"
# read data into the spchtbl format
mc.data <- read_spchtbl(filepath = mc.elan.txt,
tbltype = "aas-elan-txt", cliptier = "code")
ai.data <- read_spchtbl(filepath = ai.elan.txt,
tbltype = "elan-basic-txt", cliptier = "Coded Segment")
spchtbl = mc.data
allowed.gap = 1000
allowed.overlap = 2000
focus.child = "CHI"
interactants = ".all-speakers"
addressee.tags = "CDS"
mode = "stretch"
chi.utts <- filter(spchtbl, speaker == focus.child)
interactants == ".all-speakers"
int.utts <- filter(spchtbl, speaker != "CHI" &
!grepl("^annotated-", speaker))
addressee.tags == "TCDS"
addressee.tags == "CDS"
int.utts <- filter(int.utts, addressee == "C")
View(int.utts)
View(chi.utts)
chi.utts <- filter(spchtbl, speaker == focus.child) %>%
mutate(
prewindow.start = start.ms - allowed.gap,
prewindow.stop = start.ms + allowed.overlap,
postwindow.start = stop.ms - allowed.overlap,
postwindow.stop = stop.ms + allowed.gap)
allowed.gap
chi.utts <- filter(spchtbl, speaker == focus.child) %>%
mutate(
prewindow.start = start.ms - allowed.gap,
prewindow.stop = start.ms + allowed.overlap,
prewindow.dur = prewindow.stop - prewindow.start,
postwindow.start = stop.ms - allowed.overlap,
postwindow.stop = stop.ms + allowed.gap,
postwindow.dur = postwindow.stop - postwindow.start)
chi.utts <- filter(spchtbl, speaker == focus.child) %>%
mutate(
prewindow.start = start.ms - allowed.gap,
prewindow.stop = start.ms + allowed.overlap,
postwindow.start = stop.ms - allowed.overlap,
postwindow.stop = stop.ms + allowed.gap)
View(mc.data)
iu.e <- c(1, 3, 5, 7)
iu.s <- c(0, 2, 4, 6)
ch.e <- c(3,6)
ch.s <- c(2,5)
findInterval(iu.e, ch.s)
findInterval(iu.s, ch.e)
chi.utts <- filter(spchtbl, speaker == focus.child) %>%
mutate(
prewindow.start = start.ms - allowed.gap,
prewindow.stop = min(stop.ms, start.ms + allowed.overlap),
postwindow.start = max(start.ms, stop.ms - allowed.overlap),
postwindow.stop = stop.ms + allowed.gap)
chi.utts <- filter(spchtbl, speaker == focus.child) %>%
mutate(
prewindow.start = start.ms - allowed.gap,
prewindow.stop = pmin(stop.ms, start.ms + allowed.overlap),
postwindow.start = pmax(start.ms, stop.ms - allowed.overlap),
postwindow.stop = stop.ms + allowed.gap)
x <- 2:18
v <- c(5, 10, 15)
findInterval(x, v)
cbind(x, findInterval(x, v))
pre.stt.intvls <- findInterval(int.utts$stop.ms, chi.utts$prewindow.start)
pre.stt.intvls
pre.stp.intvls <- findInterval(int.utts$stop.ms, chi.utts$prewindow.stop)
length(int.utts$stop.ms)
length(pre.stt.intvls)
View( cbind(int.utts$stop.ms, chi.utts$prewindow.start[pre.stt.intvls], chi.utts$prewindow.start[pre.stp.intvls]))
View(cbind(pre.stt.intvls, pre.stp.intvls))
x
cut(x, breaks = v)
as.integer(cut(x, breaks = v))
x
x <- c(1:35)
y.stt <- c(1, 5, 15, 18, 24)
y.stp <- c(3, 9, 16, 22, 30)
as.integer(cut(x, breaks = y.stt, right = FALSE))
x
as.integer(cut(x, breaks = y.stp, right = TRUE))
x
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start), max(chi.utts$prewindow.stop))
)
View(prewindow.ms.tbl)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start): max(chi.utts$prewindow.stop))
)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start): max(chi.utts$prewindow.stop))) %>%
mutate(chi.utt.pre.window = which(msec <= chi.utts$prewindow.stop & msec >= chi.utts$prewindow.start))
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start): max(chi.utts$prewindow.stop)))
3000 <= chi.utts$prewindow.stop
3000 >= chi.utts$prewindow.start
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start): max(chi.utts$prewindow.stop)))
mutate(before.stop = msec <= chi.utts$prewindow.stop)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start): max(chi.utts$prewindow.stop))) %>%
mutate(before.stop = msec <= chi.utts$prewindow.stop)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
for (utt in chi.utts) {
prewindow.ms.tbl$chi.utt.idx[chi.utts$prewindow.start,
chi.utts$prewindow.stop] <- "a"
}
for (utt in chi.utts) {
prewindow.ms.tbl$chi.utt.idx[chi.utts$prewindow.start[utt],
chi.utts$prewindow.stop[utt]] <- "a"
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
for (i in 1:nrow(chi.utts)) {
prewindow.ms.tbl$chi.utt.idx[chi.utts$prewindow.start[i],
chi.utts$prewindow.stop[i]] <- "a"
}
i
chi.utts$prewindow.start[i]
chi.utts$prewindow.stop[i]
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.idx[utt.idx] <- "a"
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- i
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
i
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- i
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = NA)
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- as.integer(i)
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = NA)
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- i
}
is.na(prewindow.ms.tbl$chi.utt.stt)
sum(is.na(prewindow.ms.tbl$chi.utt.stt))
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = NA)
utt.idx <- which(prewindow.ms.tbl$msec >= 2150 &
prewindow.ms.tbl$msec <= 2160)
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- 1
utt.idx <- which(prewindow.ms.tbl$msec >= 2158 &
prewindow.ms.tbl$msec <= 2163)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = NA)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = NA)
utt.idx <- which(prewindow.ms.tbl$msec >= 2150 &
prewindow.ms.tbl$msec <= 2160)
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(1), sep = '_')
utt.idx <- which(prewindow.ms.tbl$msec >= 2158 &
prewindow.ms.tbl$msec <= 2163)
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(2), sep = '_')
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = "NA")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(i), sep = '_')
}
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = "")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(i), sep = '_')
}
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(!is.na(msec))
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = "")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(i), sep = '_')
}
nrow(prewindow.ms.tbl)
sum(is.na(prewindow.ms.tbl$chi.utt.stt))
table(prewindow.ms.tbl$chi.utt.stt)
prewindow.ms.tbl.2 <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0)
nrow(prewindow.ms.tbl.2)
nrow(prewindow.ms.tbl)
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = "")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(i), sep = '_')
}
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0)
sort(unique(prewindow.ms.tbl$chi.utt.stt))
select(int.utts, c(speaker, stop.ms)
)
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms"))
table(prewindow.ms.tbl$speaker)
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms"))
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.stt = "")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.stt[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.stt[utt.idx], as.character(i), sep = '_')
}
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.stt) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
View(prewindow.ms.tbl)
chi.utts[5,]
allowed.gap
allowed.overlap
prewindow.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$prewindow.stop)),
chi.utt.idx = "")
for (i in 1:nrow(chi.utts)) {
utt.idx <- which(prewindow.ms.tbl$msec >= chi.utts$prewindow.start[i] &
prewindow.ms.tbl$msec <= chi.utts$prewindow.stop[i])
prewindow.ms.tbl$chi.utt.idx[utt.idx] <- paste(
prewindow.ms.tbl$chi.utt.idx[utt.idx], as.character(i), sep = '_')
}
prewindow.ms.tbl <- prewindow.ms.tbl %>%
filter(nchar(chi.utt.idx) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
window.ms.tbl <- tibble(
msec = c(min(chi.utts$prewindow.start):max(chi.utts$postwindow.stop)),
chi.utt.idx.prw = "",
chi.utt.idx.psw = ""
)
for (i in 1:nrow(chi.utts)) {
utt.idx.prw <- which(
window.ms.tbl$msec >= chi.utts$prewindow.start[i] &
window.ms.tbl$msec <= chi.utts$prewindow.stop[i])
window.ms.tbl$chi.utt.idx.prw[utt.idx.prw] <- paste(
window.ms.tbl$chi.utt.idx.prw[utt.idx.prw], as.character(i), sep = '_')
utt.idx.psw <- which(
window.ms.tbl$msec >= chi.utts$postwindow.start[i] &
window.ms.tbl$msec <= chi.utts$postwindow.stop[i])
window.ms.tbl$chi.utt.idx.psw[utt.idx.psw] <- paste(
window.ms.tbl$chi.utt.idx.psw[utt.idx.psw], as.character(i), sep = '_')
}
View(filter(window.ms.tbl, nchar(chi.utt.idx.prw) > 0))
prewindow.stops <- filter(window.ms.tbl, nchar(chi.utt.idx.prw) > 0) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
nrow(prewindow.stops)
View(prewindow.stops)
prewindow.stops <- filter(window.ms.tbl, nchar(chi.utt.idx.prw) > 0) %>%
dplyr::select(-chi.utt.idx.psw) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
postwindow.starts <- filter(window.ms.tbl, nchar(chi.utt.idx.psw) > 0) %>%
dplyr::select(-chi.utt.idx.prw) %>%
left_join(select(int.utts, c(speaker, stop.ms)), by = c("msec" = "stop.ms")) %>%
filter(!is.na(speaker))
nrow(postwindow.starts)
View(postwindow.starts)
postwindow.starts <- filter(window.ms.tbl, nchar(chi.utt.idx.psw) > 0) %>%
dplyr::select(-chi.utt.idx.prw) %>%
left_join(select(int.utts, c(speaker, start.ms)), by = c("msec" = "start.ms")) %>%
filter(!is.na(speaker))
chi.utts[3:5,]
chi.utts[3:5,]
