prompts.basic <- tttbl %>%
filter(!is.na(prompt.spkr)) %>%
select(prompt.spkr, prompt.start.ms, prompt.stop.ms) %>%
distinct() %>%
rename(cont.spkr = prompt.spkr, cont.start.ms = prompt.start.ms,
cont.stop.ms = prompt.stop.ms) %>%
mutate(has.response = 1)
responses.basic <- tttbl %>%
filter(!is.na(response.spkr)) %>%
select(response.spkr, response.start.ms, response.stop.ms) %>%
distinct() %>%
rename(cont.spkr = response.spkr, cont.start.ms = response.start.ms,
cont.stop.ms = response.stop.ms) %>%
mutate(has.prompt = 1)
contingent.utts.basic <- full_join(prompts.basic, responses.basic,
by = c("cont.spkr", "cont.start.ms", "cont.stop.ms"))
# for each speaker in contingent utts
unique.cont.spkrs <- unique(contingent.utts.basic$cont.spkr)
cont.spkrs.continuations <- tibble()
for (spkr in unique.cont.spkrs) {
spkr.int.utts <- int.utts %>%
filter(speaker == spkr) %>%
select(speaker, start.ms, stop.ms)
cont.spkr.tbl <- contingent.utts.basic %>%
filter(cont.spkr == spkr) %>%
full_join(spkr.int.utts, by = c(
"cont.spkr" = "speaker", "cont.start.ms" = "start.ms",
"cont.stop.ms" = "stop.ms")) %>%
arrange(cont.start.ms)
cont.spkr.tbl$stop.prev.ms <- c(
0, cont.spkr.tbl$cont.stop.ms[1:nrow(cont.spkr.tbl)-1])
cont.spkr.tbl$response.prev.spkr <- c(
NA, cont.spkr.tbl$has.response[1:nrow(cont.spkr.tbl)-1])
cont.spkr.tbl <- cont.spkr.tbl %>%
mutate(new.turn = case_when(
response.prev.spkr == 1 ~ 1,
has.prompt == 1 ~ 1,
cont.start.ms - stop.prev.ms > allowed.gap ~ 1,
TRUE ~ 0))
cont.spkr.tbl$cont.spkr.turn.num <- cumsum(cont.spkr.tbl$new.turn == 1)
cont.spkr.tbl <- cont.spkr.tbl %>%
select(-stop.prev.ms, -response.prev.spkr, -new.turn) %>%
ungroup()
cont.spkr.tbl.multiincrement <- cont.spkr.tbl %>%
group_by(cont.spkr, cont.spkr.turn.num) %>%
summarize(
cont.spkr.prev.increment.start = min(cont.start.ms),
cont.spkr.post.increment.stop = max(cont.stop.ms),
cont.spkr.n.increments = n()) %>%
filter(cont.spkr.n.increments > 1) %>%
left_join(select(int.utts, c(speaker, start.ms, stop.ms)),
by = c("cont.spkr" = "speaker",
"cont.spkr.prev.increment.start" = "start.ms")) %>%
left_join(select(int.utts, c(speaker, start.ms, stop.ms)),
by = c("cont.spkr" = "speaker",
"cont.spkr.post.increment.stop" = "stop.ms")) %>%
rename("cont.spkr.prev.increment.stop" = "stop.ms",
"cont.spkr.post.increment.start" = "start.ms") %>%
ungroup() %>%
select(cont.spkr, cont.spkr.turn.num, cont.spkr.n.increments,
cont.spkr.prev.increment.start, cont.spkr.prev.increment.stop,
cont.spkr.post.increment.start, cont.spkr.post.increment.stop)
spkr.contingent.utts.basic <- contingent.utts.basic %>%
filter(cont.spkr == spkr) %>%
left_join(select(cont.spkr.tbl, c("cont.start.ms", "cont.spkr.turn.num")),
by = "cont.start.ms") %>%
left_join(cont.spkr.tbl.multiincrement,
by = c("cont.spkr.turn.num", "cont.spkr")) %>%
mutate(
cont.spkr.prev.increment.start = ifelse(
cont.spkr.prev.increment.start == cont.start.ms,
NA, cont.spkr.prev.increment.start),
cont.spkr.prev.increment.stop = ifelse(
is.na(cont.spkr.prev.increment.start),
NA, cont.spkr.prev.increment.stop),
cont.spkr.post.increment.start = ifelse(
cont.spkr.post.increment.start == cont.start.ms,
NA, cont.spkr.post.increment.start),
cont.spkr.post.increment.stop = ifelse(
is.na(cont.spkr.post.increment.start),
NA, cont.spkr.post.increment.stop)
) %>%
replace_na(list(cont.spkr.n.increments = 1))
cont.spkrs.continuations <- bind_rows(cont.spkrs.continuations,
spkr.contingent.utts.basic)
}
# add these continuation utterance start/stop times into the main tibble
tttbl <- tttbl %>%
left_join(select(cont.spkrs.continuations, c("cont.spkr", "cont.start.ms",
"cont.spkr.prev.increment.start", "cont.spkr.prev.increment.stop",
"cont.spkr.n.increments")),
by = c("prompt.spkr" = "cont.spkr", "prompt.start.ms" = "cont.start.ms")) %>%
rename("prompt.prev.increment.start" = "cont.spkr.prev.increment.start",
"prompt.prev.increment.stop" = "cont.spkr.prev.increment.stop",
"prompt.n.increments" = "cont.spkr.n.increments") %>%
left_join(select(cont.spkrs.continuations, c("cont.spkr", "cont.start.ms",
"cont.spkr.post.increment.start", "cont.spkr.post.increment.stop",
"cont.spkr.n.increments")),
by = c("response.spkr" = "cont.spkr", "response.start.ms" = "cont.start.ms")) %>%
rename("response.post.increment.start" = "cont.spkr.post.increment.start",
"response.post.increment.stop" = "cont.spkr.post.increment.stop",
"response.n.increments" = "cont.spkr.n.increments")
# clean up for return
if (!("addressee" %in% names(tttbl))) {
tttbl <- tttbl %>%
mutate(addressee = NA)
}
tttbl <- tttbl %>%
select(speaker, annot.clip, start.ms, stop.ms, addressee, spkr.n.increments,
spkr.prev.increment.start, spkr.prev.increment.stop,
spkr.post.increment.start, spkr.post.increment.stop,
prompt.spkr, prompt.start.ms, prompt.stop.ms, prompt.n.increments,
prompt.prev.increment.start, prompt.prev.increment.stop,
response.spkr, response.start.ms, response.stop.ms, response.n.increments,
response.post.increment.start, response.post.increment.stop)
return(tttbl)
}
continuation.utts <- find_tttbl_continuations(chi.tttbl,
chi.utts, int.utts, allowed.gap)
find_tttbl_continuations <- function(tttbl, focus.utts,
int.utts, allowed.gap) {
# find sequences of vocalizations by the focal speaker
# that are unbroken by turn transitions to another speaker
tttbl$stop.prev.ms <- c(
0, tttbl$stop.ms[1:nrow(tttbl)-1])
tttbl$response.prev.spkr <- c(
NA, tttbl$response.spkr[1:nrow(tttbl)-1])
tttbl <- tttbl %>%
mutate(new.turn = case_when(
response.prev.spkr == 1 ~ 1,
!is.na(prompt.spkr) == 1 ~ 1,
start.ms - stop.prev.ms > allowed.gap ~ 1,
TRUE ~ 0))
tttbl$speaker.turn.num <- cumsum(tttbl$new.turn == 1)
tttbl <- tttbl %>%
select(-stop.prev.ms, -response.prev.spkr, -new.turn)
tttbl.spkr.turns.multiincrement <- tttbl %>%
group_by(speaker.turn.num) %>%
summarize(
spkr.prev.increment.start = min(start.ms),
spkr.post.increment.stop = max(stop.ms),
spkr.n.increments = n()) %>%
filter(spkr.n.increments > 1) %>%
left_join(select(tttbl, c(start.ms, stop.ms)),
by = c("spkr.prev.increment.start" = "start.ms")) %>%
left_join(select(tttbl, c(start.ms, stop.ms)),
by = c("spkr.post.increment.stop" = "stop.ms")) %>%
rename("spkr.prev.increment.stop" = "stop.ms",
"spkr.post.increment.start" = "start.ms") %>%
select(speaker.turn.num, spkr.n.increments,
spkr.prev.increment.start, spkr.prev.increment.stop,
spkr.post.increment.start, spkr.post.increment.stop)
tttbl <- tttbl %>%
left_join(tttbl.spkr.turns.multiincrement, by = "speaker.turn.num") %>%
mutate(
spkr.prev.increment.start = ifelse(
spkr.prev.increment.start == start.ms,
NA, spkr.prev.increment.start),
spkr.prev.increment.stop = ifelse(
is.na(spkr.prev.increment.start),
NA, spkr.prev.increment.stop),
spkr.post.increment.start = ifelse(
spkr.post.increment.start == start.ms,
NA, spkr.post.increment.start),
spkr.post.increment.stop = ifelse(
is.na(spkr.post.increment.start),
NA, spkr.post.increment.stop)) %>%
replace_na(list(spkr.n.increments = 1))
# find sequences of vocalizations by the prompt/response speakers
# that are unbroken by turn transitions to the focal speaker
prompts.basic <- tttbl %>%
filter(!is.na(prompt.spkr)) %>%
select(prompt.spkr, prompt.start.ms, prompt.stop.ms) %>%
distinct() %>%
rename(cont.spkr = prompt.spkr, cont.start.ms = prompt.start.ms,
cont.stop.ms = prompt.stop.ms) %>%
mutate(has.response = 1)
responses.basic <- tttbl %>%
filter(!is.na(response.spkr)) %>%
select(response.spkr, response.start.ms, response.stop.ms) %>%
distinct() %>%
rename(cont.spkr = response.spkr, cont.start.ms = response.start.ms,
cont.stop.ms = response.stop.ms) %>%
mutate(has.prompt = 1)
contingent.utts.basic <- full_join(prompts.basic, responses.basic,
by = c("cont.spkr", "cont.start.ms", "cont.stop.ms"))
# for each speaker in contingent utts
unique.cont.spkrs <- unique(contingent.utts.basic$cont.spkr)
cont.spkrs.continuations <- tibble()
for (spkr in unique.cont.spkrs) {
spkr.int.utts <- int.utts %>%
filter(speaker == spkr) %>%
select(speaker, start.ms, stop.ms)
cont.spkr.tbl <- contingent.utts.basic %>%
filter(cont.spkr == spkr) %>%
full_join(spkr.int.utts, by = c(
"cont.spkr" = "speaker", "cont.start.ms" = "start.ms",
"cont.stop.ms" = "stop.ms")) %>%
arrange(cont.start.ms)
cont.spkr.tbl$stop.prev.ms <- c(
0, cont.spkr.tbl$cont.stop.ms[1:nrow(cont.spkr.tbl)-1])
cont.spkr.tbl$response.prev.spkr <- c(
NA, cont.spkr.tbl$has.response[1:nrow(cont.spkr.tbl)-1])
cont.spkr.tbl <- cont.spkr.tbl %>%
mutate(new.turn = case_when(
response.prev.spkr == 1 ~ 1,
has.prompt == 1 ~ 1,
cont.start.ms - stop.prev.ms > allowed.gap ~ 1,
TRUE ~ 0))
cont.spkr.tbl$cont.spkr.turn.num <- cumsum(cont.spkr.tbl$new.turn == 1)
cont.spkr.tbl <- cont.spkr.tbl %>%
select(-stop.prev.ms, -response.prev.spkr, -new.turn) %>%
ungroup()
cont.spkr.tbl.multiincrement <- cont.spkr.tbl %>%
group_by(cont.spkr, cont.spkr.turn.num) %>%
summarize(
cont.spkr.prev.increment.start = min(cont.start.ms),
cont.spkr.post.increment.stop = max(cont.stop.ms),
cont.spkr.n.increments = n()) %>%
filter(cont.spkr.n.increments > 1) %>%
left_join(select(int.utts, c(speaker, start.ms, stop.ms)),
by = c("cont.spkr" = "speaker",
"cont.spkr.prev.increment.start" = "start.ms")) %>%
left_join(select(int.utts, c(speaker, start.ms, stop.ms)),
by = c("cont.spkr" = "speaker",
"cont.spkr.post.increment.stop" = "stop.ms")) %>%
rename("cont.spkr.prev.increment.stop" = "stop.ms",
"cont.spkr.post.increment.start" = "start.ms") %>%
ungroup() %>%
select(cont.spkr, cont.spkr.turn.num, cont.spkr.n.increments,
cont.spkr.prev.increment.start, cont.spkr.prev.increment.stop,
cont.spkr.post.increment.start, cont.spkr.post.increment.stop)
spkr.contingent.utts.basic <- contingent.utts.basic %>%
filter(cont.spkr == spkr) %>%
left_join(select(cont.spkr.tbl, c("cont.start.ms", "cont.spkr.turn.num")),
by = "cont.start.ms") %>%
left_join(cont.spkr.tbl.multiincrement,
by = c("cont.spkr.turn.num", "cont.spkr")) %>%
mutate(
cont.spkr.prev.increment.start = ifelse(
cont.spkr.prev.increment.start == cont.start.ms,
NA, cont.spkr.prev.increment.start),
cont.spkr.prev.increment.stop = ifelse(
is.na(cont.spkr.prev.increment.start),
NA, cont.spkr.prev.increment.stop),
cont.spkr.post.increment.start = ifelse(
cont.spkr.post.increment.start == cont.start.ms,
NA, cont.spkr.post.increment.start),
cont.spkr.post.increment.stop = ifelse(
is.na(cont.spkr.post.increment.start),
NA, cont.spkr.post.increment.stop)
) %>%
replace_na(list(cont.spkr.n.increments = 1))
cont.spkrs.continuations <- bind_rows(cont.spkrs.continuations,
spkr.contingent.utts.basic)
}
# add these continuation utterance start/stop times into the main tibble
tttbl <- tttbl %>%
left_join(select(cont.spkrs.continuations, c("cont.spkr", "cont.start.ms",
"cont.spkr.prev.increment.start", "cont.spkr.prev.increment.stop",
"cont.spkr.n.increments")),
by = c("prompt.spkr" = "cont.spkr", "prompt.start.ms" = "cont.start.ms")) %>%
rename("prompt.prev.increment.start" = "cont.spkr.prev.increment.start",
"prompt.prev.increment.stop" = "cont.spkr.prev.increment.stop",
"prompt.n.increments" = "cont.spkr.n.increments") %>%
left_join(select(cont.spkrs.continuations, c("cont.spkr", "cont.start.ms",
"cont.spkr.post.increment.start", "cont.spkr.post.increment.stop",
"cont.spkr.n.increments")),
by = c("response.spkr" = "cont.spkr", "response.start.ms" = "cont.start.ms")) %>%
rename("response.post.increment.start" = "cont.spkr.post.increment.start",
"response.post.increment.stop" = "cont.spkr.post.increment.stop",
"response.n.increments" = "cont.spkr.n.increments")
# clean up for return
if (!("addressee" %in% names(tttbl))) {
tttbl <- tttbl %>%
mutate(addressee = NA)
}
tttbl <- tttbl %>%
select(speaker, annot.clip, start.ms, stop.ms, addressee, spkr.n.increments,
spkr.prev.increment.start, spkr.prev.increment.stop,
spkr.post.increment.start, spkr.post.increment.stop,
prompt.spkr, prompt.start.ms, prompt.stop.ms, prompt.n.increments,
prompt.prev.increment.start, prompt.prev.increment.stop,
response.spkr, response.start.ms, response.stop.ms, response.n.increments,
response.post.increment.start, response.post.increment.stop)
return(tttbl)
}
continuation.utts <- find_tttbl_continuations(chi.tttbl,
chi.utts, int.utts, allowed.gap)
View(continuation.utts)
write_csv(continuation.utts, "checkme.csv")
continuation.utts %>% group_by(spkr.n.increments) %>% summarize(n.prev = sum(!is.na(spkr.prev.increment.start))/n())
continuation.utts %>% group_by(spkr.n.increments) %>% summarize(n.post = sum(!is.na(spkr.post.increment.start))/n())
continuation.utts %>% group_by(prompt.n.increments) %>% summarize(n.pre = sum(!is.na(prompt.prev.increment.start))/n())
continuation.utts %>% group_by(response.n.increments) %>% summarize(n.post = sum(!is.na(response.post.increment.start))/n())
rm(list = ls())
source("tabularize-data.R")
source("transition-detectors.R")
source("chattr-helpers.R")
source("tabularize-data.R")
source("transition-detectors.R")
source("continuation-detectors.R")
source("intseq-detectors.R")
allowed.gap <- 2000
allowed.overlap <- 1000
LENA.interactants <- c("FAN", "MAN")
ttdata.spchtbl <- read_spchtbl("test_files/ITS/e20191024_000253_008232.its",
"lena-its", lxonly = TRUE)
ttdata.turnsonly <- ttdata.spchtbl %>%
fetch_transitions(allowed.gap, allowed.overlap,
"CHN", LENA.interactants, "none", "strict")
write_csv(ttdata.turnsonly, "checkme.csv")
library(tidyverse)
ebtbl.colnames <- c("tier", "speaker", "start.ms", "stop.ms", "duration", "value")
ann.marker <- "annotated-" ## ALSO USED IN CHATTR HELPERS
spch.seg.ptrn <- ".*Segment spkr=\"([A-Z]{3}).*startTime=\"([A-Z0-9.]+)\" endTime=\"([A-Z0-9.]+)\".*"
strt.clock.ptrn <- ".*<Recording num=\"\\d+\".*startTime=\"([A-Z0-9.]+)\" endTime=\"([A-Z0-9.]+)\""
paraling.ptrn <- "^&=[a-z]+[.!?]$"
tbl <- ""test_files/rttm/TEST-ALUC.rttm""
tbl <- "test_files/rttm/TEST-ALUC.rttm"
cliptier
lxonly = FALSE
rttmtbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
course.type = col_character(),
filename = col_character(),
unk1 = col_integer(),
start.sc = col_numeric(),
duration.sc = col_numeric(),
unk2 = col_integer(),
unk3 = col_integer(),
tier = col_character(),
unk4 = col_integer(),
unk5 = col_integer()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
rttmtbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
course.type = col_character(),
filename = col_character(),
unk1 = col_integer(),
start.sc = col_integer(),
duration.sc = col_integer(),
unk2 = col_integer(),
unk3 = col_integer(),
tier = col_character(),
unk4 = col_integer(),
unk5 = col_integer()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
tbl <- "test_files/rttm/TEST.rttm"
rttmtbl <- read_delim(file = tbl, delim = "\t",
col_names = ebtbl.colnames, col_types = cols(
course.type = col_character(),
filename = col_character(),
unk1 = col_integer(),
start.sc = col_integer(),
duration.sc = col_integer(),
unk2 = col_integer(),
unk3 = col_integer(),
tier = col_character(),
unk4 = col_integer(),
unk5 = col_integer()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
rttmtbl <- read_delim(file = tbl, delim = " ",
col_names = ebtbl.colnames, col_types = cols(
course.type = col_character(),
filename = col_character(),
unk1 = col_integer(),
start.sc = col_integer(),
duration.sc = col_integer(),
unk2 = col_integer(),
unk3 = col_integer(),
tier = col_character(),
unk4 = col_integer(),
unk5 = col_integer()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
read_delim(file = tbl, delim = " ")
read_delim(file = tbl, delim = " ",
col_names = ebtbl.colnames, col_types = cols(
course.type = col_character(),
filename = col_character(),
unk1 = col_double(),
start.sc = col_double(),
duration.sc = col_double(),
unk2 = col_character(),
unk3 = col_character(),
tier = col_character(),
unk4 = col_character(),
unk5 = col_character()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
ebtbl.colnames
rttmtbl.colnames <- c("source.type", "filename", "unk1", "start.sc",
rttmtbl.colnames <- c("source.type", "filename", "unk1", "start.sc",
"duration.sc", "unk2", "unk3", "tier", "unk4", "unk5")
rttmtbl.colnames <- c("source.type", "filename", "unk1", "start.sc",
"duration.sc", "unk2", "unk3", "tier", "unk4", "unk5")
rttmtbl.colnames
read_delim(file = tbl, delim = " ",
col_names = rttmtbl.colnames, col_types = cols(
source.type = col_character(),
filename = col_character(),
unk1 = col_double(),
start.sc = col_double(),
duration.sc = col_double(),
unk2 = col_character(),
unk3 = col_character(),
tier = col_character(),
unk4 = col_character(),
unk5 = col_character()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
))
rttmtbl <- read_delim(file = tbl, delim = " ",
col_names = rttmtbl.colnames, col_types = cols(
source.type = col_character(),
filename = col_character(),
unk1 = col_double(),
start.sc = col_double(),
duration.sc = col_double(),
unk2 = col_character(),
unk3 = col_character(),
tier = col_character(),
unk4 = col_character(),
unk5 = col_character()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
)) %>%
mutate(
speaker = tier,
start.ms = start.sc * 1000,
duration = duration.sc * 1000,
stop.ms = start.ms + duration,
value = NA
)
rttmtbl
rttmtbl <- read_delim(file = tbl, delim = " ",
col_names = rttmtbl.colnames, col_types = cols(
source.type = col_character(),
filename = col_character(),
unk1 = col_double(),
start.sc = col_double(),
duration.sc = col_double(),
unk2 = col_character(),
unk3 = col_character(),
tier = col_character(),
unk4 = col_character(),
unk5 = col_character()
# tier = col_character(),
# speaker = col_character(),
# start.ms = col_integer(),
# stop.ms = col_integer(),
# duration = col_integer(),
# value = col_character()
)) %>%
mutate(
speaker = tier,
start.ms = start.sc * 1000,
duration = duration.sc * 1000,
stop.ms = start.ms + duration,
value = NA
) %>%
dplyr::select(tier, speaker, start.ms, stop.ms, duration, value)
rttmtbl
lxonly
unique(rttmtbl$speaker)
cliptier <- unique(rttmtbl$speaker)[1]
clip.tbl <- filter(cliptier, speaker == cliptier) %>%
mutate(speaker = paste0(ann.marker, start.ms, "_", stop.ms, "-", value))
cliptier %in% unique(rttmtbl$speaker)
cliptier
clip.tbl <- filter(cliptier, speaker == cliptier) %>%
mutate(speaker = paste0(ann.marker, start.ms, "_", stop.ms, "-", value))
clip.tbl <- filter(rttmtbl, speaker == cliptier) %>%
mutate(speaker = paste0(ann.marker, start.ms, "_", stop.ms, "-", value))
clip.tbl
